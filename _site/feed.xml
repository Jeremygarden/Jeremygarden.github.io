<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Jeremy Li</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2019-04-14T01:14:45-04:00</updated>
<id>/</id>
<author>
  <name>Jeremy Li</name>
  <uri>/</uri>
  <email>li.mingxuan623@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[To be a pushover or a nitpicker, It's a question.]]></title>
  <link rel="alternate" type="text/html" href="/blog/Code_review_thoughts/" />
  <id>/blog/Code_review_thoughts</id>
  <published>2018-11-16T00:00:00-05:00</published>
  <updated>2018-11-16T00:00:00-05:00</updated>
  <author>
    <name>Jeremy Li</name>
    <uri></uri>
    <email>li.mingxuan623@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Recently my team is getting to be a hot potato around in the eng department since a lot of customer features/issues raised up to leadership during our SAFe Planning Conference. The solely purpose to have a team here is for better customer/developer experience. Is that super cool? It’s just my thing to get insights from frontier with real users.Nothing change too much in my daily routine except being hustler around more often. But I noticed a subtle interesting process, which is our code review. This post is aiming to share some helpful thoughts from multiple hats, like developer’s mind and product owner’s mind.(assume I’m in his shoes.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://memegenerator.net/img/instances/37612347/im-chuck-norris-i-approve-of-this-code-review.jpg&quot; alt=&quot;Bless Code review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Definitely not the best practice on my team, but what’s the root cause for non-effective way and why we cannot get rid of it earlier on, and most importantly — how can we do it better in the future?&lt;/p&gt;

&lt;p&gt;I try to summarized into a few aspects we might need to highlight and to face it honestly as a whole development team.&lt;/p&gt;

&lt;h5 id=&quot;a-bit-political-stings-can-emerge-even-worse&quot;&gt;A bit political stings can emerge even worse.&lt;/h5&gt;
&lt;p&gt;Probably this is the worst part in a harmony of engineering life, but it does happen…kind of easy in real life example. I mean no one is originally trying to bully a junior by intimidating him/her to do A or B,  or to show off how fancy Streaming in Java 9 or how solid Promise in ES6 to save all legacy callback hell. But once this loop starts rolling on the road, it hardly has an immediate stop without coming back and forth. And in my experience, It’s such a waste to get distracted from getting more important things done, how about we just even have a beer then have a kickback in the cafe area? I really want, sometimes.&lt;/p&gt;

&lt;h5 id=&quot;security-review-is-often-undervalued-and-bite-us-back&quot;&gt;Security review is often-undervalued and bite us back&lt;/h5&gt;
&lt;p&gt;We always take pride a lot as owning “Security is a first” as engineering creed here. We can’t just follow behind Transunion, not even need to mention tech giant — Facebook.(Sorry, my friend in FB lol…you’re not on the third-party API team though.) When it comes to code review, however, developers are inclined to have a mindset like a gang of hackers inadvertently crack things down and fix it up in the build pipeline, and even feeling awesome which is a classical false impression for software engineer, especially  not-well-seasoned ones. but we need to be tougher on sausage-baking process in case of owning security compliance  (we do have our internal security guideline for engineering teams). Self-defending code is always good even it’s not in very lean and smart way.&lt;/p&gt;

&lt;h5 id=&quot;lower-documentation-coverage-is-what-triggers-confusion&quot;&gt;Lower documentation coverage is what triggers confusion&lt;/h5&gt;
&lt;p&gt;Reduce more explicit question in the comments and drag a big conversation frequently. Especially a huge benefit for new hire (or one is not much involved with a certain product’s recent feature, but is a member of PR’s approval list), In my opinion, good coder could have been writing down the clear technical specs such as architecture design doc/key defects report and etc, based upon our code style guidance.&lt;/p&gt;

&lt;p&gt;There are several basic ideas came out of my mind and I think it’s noteworthy following it at least myself:&lt;br /&gt;
1. Focus on the code itself but ignore who wrote the code.&lt;br /&gt;
2. Raise kind question without sarcastic/joke attitude to make a suggestion.&lt;br /&gt;
3. Keep conversation as lean as possible but also informational. (Make this meaningful…)&lt;br /&gt;
4. Implement Code Lint tools (We are considering SonarQube integrated into Gitlab pipeline after 2 weeks I wrote this post. Yah!)&lt;br /&gt;
5. Encourage team members to get some data or insights through the code review and expand transparency, which could possibly reduce process shit in the long run.&lt;/p&gt;

&lt;p&gt;From PO’s point of view, It’s likely getting highly subjective things to evaluate the incentives that development team deliver. Are we still great software engineers if we ship the sloppy hacky code when we don’t have too much runway? or we are just sticking around the standards by writing beautiful code given loads of time.&lt;br /&gt;
&lt;img src=&quot;https://jameelnabbo.com/wp-content/uploads/2018/05/1_nxXw5ViikNF2tIzIs21qlw-1000x559.png&quot; alt=&quot;bless code review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are tons of solid materials could be a gold guide, I mean generally for code reviews in most cases. But I am not going to draft a email with a long list of hyperlinks then spread to the team. (I know it doesn’t always work even if you do a funny engineering survey or questionnaire.) I want to figure out why and really talk to key team members and discuss a viable approach for us.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/Code_review_thoughts/&quot;&gt;To be a pushover or a nitpicker, It's a question.&lt;/a&gt; was originally published by Jeremy Li at &lt;a href=&quot;&quot;&gt;Jeremy Li&lt;/a&gt; on November 16, 2018.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Thoughts about Google Material Design]]></title>
  <link rel="alternate" type="text/html" href="/blog/Thoughts_about_Google_Material_Design/" />
  <id>/blog/Thoughts_about_Google_Material_Design</id>
  <published>2015-12-17T00:00:00-05:00</published>
  <updated>2015-12-17T00:00:00-05:00</updated>
  <author>
    <name>Jeremy Li</name>
    <uri></uri>
    <email>li.mingxuan623@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Recently I heard of the Google Material Design, the most hot and famous design Bible. So I went through the most part of it on my iPad at some toilet time…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn0.tnwcdn.com/wp-content/blogs.dir/1/files/2015/03/materialdesign-730x315.jpg&quot; alt=&quot;Google material design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the first glance, I didn’t pay much attention to what it defines about itself and how to demostrate the essentials of it. Honestly, I don’t even feel like how superior the Google designers represent their thought on the web pages, Instead I like the way less bolder about color sets, richer but no-obvious interactions on user end. I think that is funnier because at one time I am freaking into Online RPG games. So I wouldn’t give a shit if I will be a Head of design team, seriously. Sorry for any fans of Material Design if you check out this post.&lt;/p&gt;

&lt;p&gt;But seems like storys doesn’t end and I was stupid…&lt;br /&gt;
Something only when you think of it peace and quiet, of course will changes you mind.&lt;/p&gt;

&lt;p&gt;The 3 golden principles that I will add up my explanations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Material is metaphor&lt;br /&gt;
In my opinion, a good designer is supposed to be a good lifer. Not just simply like a skilled fashionist who owns first-class taste of style’s trends, but own some built-in function that called aesthetic taste in your blood. A simple pump gear, a tiny terrance, a not-that-mess street. All matters contains your understanding of better designs, carefully and sincerely treats our surroundings will inspire ourselfs inside.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bold, Graphic, Intentional&lt;br /&gt;
New era is coming for younger ages and radical ideas. Well-designed products should not to yield the most thoughts, but cater to the nicest users. The boldness, graphics and lots of intentions means the way of pureness of designer’s heart. It’s difficult to cater for all tastes, always happen. So be yourself, do your beautiful thing you think. I bet that is the best move. That is “A-R-T” all about.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Motions provides meaning.&lt;br /&gt;
I think the most modern elegant web pages means more than rich motions.&lt;br /&gt;
Avoiding the overdrawing your “animation credit account”, we better clearify what the product would be on earth or what the final issues need to be solved instead of putting seemingly awesome effects to attract more potentials users. You at least have to care about your original intentions and your current users. Only emphasize on core functionality makes the simpler, neater interface for users. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason why I look into the Material Design is not only I guess I have something on design maybe, possible, sort of…(that’s why I also touch wireframing, sketching, A/B testing, etc.), but currently as a developer or engineer(whatever you name it), it really helps me to better understand how the design process goes behind the scenes and I think this might be the more effective way to communicate and collaborate with designers in dev environment. To make good product together, put myself in other’s shoes, it’s always no bad.&lt;/p&gt;

&lt;p&gt;Jeremy&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/Thoughts_about_Google_Material_Design/&quot;&gt;Thoughts about Google Material Design&lt;/a&gt; was originally published by Jeremy Li at &lt;a href=&quot;&quot;&gt;Jeremy Li&lt;/a&gt; on December 17, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Git common use]]></title>
  <link rel="alternate" type="text/html" href="/blog/Git_common_use/" />
  <id>/blog/Git_common_use</id>
  <published>2015-11-21T00:00:00-05:00</published>
  <updated>2015-11-21T00:00:00-05:00</updated>
  <author>
    <name>Jeremy Li</name>
    <uri></uri>
    <email>li.mingxuan623@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Git is one of the beautiful things if you act as a dev on the stage.&lt;/p&gt;

&lt;p&gt;I have nothing to say except love it.&lt;/p&gt;

&lt;p&gt;But this post is coming across some frequently used commands. Just tagged as my notes for review.&lt;br /&gt;
&lt;img src=&quot;https://1.bp.blogspot.com/--uNcah6YUSw/UZaB5xCzMNI/AAAAAAAAAhs/khSzRB0MIkc/s1600/git_everthing_is_local.png&quot; alt=&quot;git daily workflow&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git init - initialise (create) a repository&lt;/li&gt;
  &lt;li&gt;git clone - copy an existing repository&lt;/li&gt;
  &lt;li&gt;git branch - list, create or delete branches&lt;/li&gt;
  &lt;li&gt;git checkout - checkout a branch, commit or file&lt;/li&gt;
  &lt;li&gt;git add - add file contents to the index (staging area)&lt;/li&gt;
  &lt;li&gt;git rm - Remove files from the working tree and from the index&lt;/li&gt;
  &lt;li&gt;git commit - Record changes to the repository&lt;/li&gt;
  &lt;li&gt;git log - Show commit logs&lt;/li&gt;
  &lt;li&gt;git branch new_version # create a new branch of development  &lt;/li&gt;
  &lt;li&gt;git checkout new_version # switch to the new branch  &lt;/li&gt;
  &lt;li&gt;git merge new_version # merge the changes from new_version into the master branch  &lt;/li&gt;
  &lt;li&gt;git pull /path/to/some_other_project new_version # pull changes from an existing git repository and merge them into a branch  &lt;/li&gt;
  &lt;li&gt;git fetch /path/to/some_other_project master # pull changes from an existing repository without merging &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://members.sange.fi/~atehwa/slides/git-slides.html&quot;&gt;clear image&lt;/a&gt; from Panu, his Git Training shows the basic and daily process if you need to modify, update, communicate between local working directory and remote repository.&lt;/p&gt;

&lt;p&gt;Furthermore,&lt;br /&gt;
Git is a huge gem for team collaboration. Everyone has to touch it in order to working efficiently and effectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://backlog.com/app/themes/backlog-child/assets/img/guides/git/collaboration/using_branches_002.png&quot; alt=&quot;git Dev Cycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the workflow model that demostrate the project releasing framework. There are also Centralized, Feature Branch, Forking and Merging. I keep this pic here for reminding me clearly when I think about adding or modify some feature on my projects. So more details have been nicely posted on the Atlassian website for you guys if you are interested.&lt;/p&gt;

&lt;h3 id=&quot;reference-links-and-useful-tutorials&quot;&gt;Reference links and useful tutorials:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;Code School 15 Mins Quick Try&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/pt/git/workflows#!workflow-gitflow&quot;&gt;Atlassian official tutorials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pcottle.github.io/learnGitBranching/&quot;&gt;My favorite one with awesome interactive effects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You gotta check this out right now!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/Git_common_use/&quot;&gt;Git common use&lt;/a&gt; was originally published by Jeremy Li at &lt;a href=&quot;&quot;&gt;Jeremy Li&lt;/a&gt; on November 21, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Sharing some Python Trick]]></title>
  <link rel="alternate" type="text/html" href="/blog/Sharing_some_Python_tricks/" />
  <id>/blog/Sharing_some_Python_tricks</id>
  <published>2015-08-08T00:00:00-04:00</published>
  <updated>2015-08-08T00:00:00-04:00</updated>
  <author>
    <name>Jeremy Li</name>
    <uri></uri>
    <email>li.mingxuan623@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;1.How to easily get the index &amp;amp; value from sequences&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;element&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;element&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#dic is different&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;my_dic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;emp_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;007&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;emp_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;coop&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bos&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_dic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.Differences among deleting elements from list&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;del: according to the given index without returning the values.&lt;/li&gt;
  &lt;li&gt;pop: according to the given index with returning the values, otherwise directly wipe out the last element and return its value.&lt;/li&gt;
  &lt;li&gt;remove: according the value of the elements with returning None.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.(Easier way)counting in the sequence &lt;/p&gt;

&lt;p&gt;What if I have to count out the duplicates from the sequence?&lt;/p&gt;

&lt;p&gt;The common code might be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;top_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;   
    &lt;span class=&quot;n&quot;&gt;value_key_pairs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value_key_pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_key_pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is a class called collections.Counter in Python Collections Library which can definitely simplify the code: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More is on the way….&lt;br /&gt;
Record my faults and results for help others.&lt;/p&gt;

&lt;p&gt;Jeremy&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/blog/Sharing_some_Python_tricks/&quot;&gt;Sharing some Python Trick&lt;/a&gt; was originally published by Jeremy Li at &lt;a href=&quot;&quot;&gt;Jeremy Li&lt;/a&gt; on August 08, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hello World,]]></title>
  <link rel="alternate" type="text/html" href="/blog/hello_world/" />
  <id>/blog/hello_world</id>
  <published>2015-03-01T00:00:00-05:00</published>
  <updated>2015-03-01T00:00:00-05:00</updated>
  <author>
    <name>Jeremy Li</name>
    <uri></uri>
    <email>li.mingxuan623@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Hi. How are you? I don’t really know how to start these things. &lt;/p&gt;

&lt;p&gt;While fiddling around with building my website, the thought of starting a real niche for recording my ideas and works came to my mind.&lt;/p&gt;

&lt;p&gt;I’ll even make this blog into some sort of note; jotting down my experiences as I journey through this thing called life. Sounds like a plan. &lt;/p&gt;

&lt;p&gt;Well, I better introduce myself. My name is Jeremy (Mingxuan) Li. &lt;/p&gt;

&lt;p&gt;A well-made product with hybrid background and attributes from the Northwest highland of China. I am afraid of stuffy weather and enjoy chasing my puppy in the rain/snow.&lt;/p&gt;

&lt;p&gt;But I am not that glommy,though. I just love the moments that I am able to quiet down and chill with myself by classic music.&lt;/p&gt;

&lt;p&gt;Except achohol, there must be something else drive guys crazy. For me, I would say ball games and driving. A true sport fanatic. I was a SG(Shooting Guard) till I graduated from high school. After that, I play badminton, tennies and 8-balls pool. You say Ping-pong? Damn, you know where I come from. &lt;/p&gt;

&lt;p&gt;Enough to digress from my serious intro…&lt;/p&gt;

&lt;p&gt;I pursued my Master Degree in Northeastern Univesity, Boston. My major is Information Systems(formerly Computer Engineering). My interests and focus are mainly about web development including up-to-date web frameworks, UI/UX design, also a bit of mechine learning and data mining. &lt;/p&gt;

&lt;p&gt;I like the feelings pretty much when I fixs some problems, get something “Unchecked” done and keep learning something new. The curiousity makes me alive in a long run. I probably stop coding if a perfectly prime rib is just placed in front of my face. However, I try my best to not be a code monkey, but the one who knows critical thinking, co-operating with teams and embracing the change. &lt;/p&gt;

&lt;p&gt;I hope I will be able to design and develop a nice online product with my friends some day. &lt;/p&gt;

&lt;p&gt;Let’s make this blog about the evolving perceptions of my life and mentality.&lt;/p&gt;

&lt;p&gt;Thanks for reading. &lt;/p&gt;

&lt;p&gt;Jeremy&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/blog/hello_world/&quot;&gt;Hello World,&lt;/a&gt; was originally published by Jeremy Li at &lt;a href=&quot;&quot;&gt;Jeremy Li&lt;/a&gt; on March 01, 2015.&lt;/p&gt;</content>
</entry>

</feed>